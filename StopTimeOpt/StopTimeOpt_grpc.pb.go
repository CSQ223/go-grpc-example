// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package StopTimeOpt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetroOptClient is the client API for MetroOpt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetroOptClient interface {
	StopTimeOpt(ctx context.Context, in *StopTimeOptRequest, opts ...grpc.CallOption) (*StopTimeOptResponse, error)
}

type metroOptClient struct {
	cc grpc.ClientConnInterface
}

func NewMetroOptClient(cc grpc.ClientConnInterface) MetroOptClient {
	return &metroOptClient{cc}
}

func (c *metroOptClient) StopTimeOpt(ctx context.Context, in *StopTimeOptRequest, opts ...grpc.CallOption) (*StopTimeOptResponse, error) {
	out := new(StopTimeOptResponse)
	err := c.cc.Invoke(ctx, "/StopTimeOpt.MetroOpt/StopTimeOpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetroOptServer is the server API for MetroOpt service.
// All implementations must embed UnimplementedMetroOptServer
// for forward compatibility
type MetroOptServer interface {
	StopTimeOpt(context.Context, *StopTimeOptRequest) (*StopTimeOptResponse, error)
	mustEmbedUnimplementedMetroOptServer()
}

// UnimplementedMetroOptServer must be embedded to have forward compatible implementations.
type UnimplementedMetroOptServer struct {
}

func (UnimplementedMetroOptServer) StopTimeOpt(context.Context, *StopTimeOptRequest) (*StopTimeOptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTimeOpt not implemented")
}
func (UnimplementedMetroOptServer) mustEmbedUnimplementedMetroOptServer() {}

// UnsafeMetroOptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetroOptServer will
// result in compilation errors.
type UnsafeMetroOptServer interface {
	mustEmbedUnimplementedMetroOptServer()
}

func RegisterMetroOptServer(s grpc.ServiceRegistrar, srv MetroOptServer) {
	s.RegisterService(&MetroOpt_ServiceDesc, srv)
}

func _MetroOpt_StopTimeOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTimeOptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetroOptServer).StopTimeOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StopTimeOpt.MetroOpt/StopTimeOpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetroOptServer).StopTimeOpt(ctx, req.(*StopTimeOptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetroOpt_ServiceDesc is the grpc.ServiceDesc for MetroOpt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetroOpt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StopTimeOpt.MetroOpt",
	HandlerType: (*MetroOptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopTimeOpt",
			Handler:    _MetroOpt_StopTimeOpt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "StopTimeOpt/StopTimeOpt.proto",
}
